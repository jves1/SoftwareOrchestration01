import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.time.LocalDate;
import java.util.List;

public class TaskManager {
   private DatabaseHandler dbHandler;
   private JFrame frame;
   private JTextField titleField, descriptionField, priorityField, deadlineField, taskIdField;
   private JButton addButton, updateButton, deleteButton, viewAllButton, displayTaskButton;;
   private JTextArea taskDisplayArea;

   // Constructor
   public TaskManager() {
      dbHandler = new DatabaseHandler();
      initializeUI();
   }

  // Method to initialize the user interface
   private void initializeUI() {
      frame = new JFrame("Personal Task Manager");
      frame.setLayout(new BorderLayout());
      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      frame.setSize(800, 600);
   
        // Input Panel with GridLayout
      JPanel inputPanel = new JPanel(new GridLayout(0, 2, 10, 10)); // 0 rows, 2 columns, horizontal and vertical gaps
      taskIdField = new JTextField();
      titleField = new JTextField();
      descriptionField = new JTextField();
      priorityField = new JTextField();
      deadlineField = new JTextField();
   
      inputPanel.add(new JLabel("Task ID (for Update/Delete): "));
      inputPanel.add(taskIdField);
      inputPanel.add(new JLabel("Title: "));
      inputPanel.add(titleField);
      inputPanel.add(new JLabel("Description: "));
      inputPanel.add(descriptionField);
      inputPanel.add(new JLabel("Priority: "));
      inputPanel.add(priorityField);
      inputPanel.add(new JLabel("Deadline (YYYY-MM-DD): "));
      inputPanel.add(deadlineField);
   
        // Buttons Panel at the bottom
      JPanel buttonPanel = new JPanel();
      addButton = new JButton("Add Task");
      updateButton = new JButton("Update Task");
      deleteButton = new JButton("Delete Task");
      viewAllButton = new JButton("View All Tasks");
      displayTaskButton = new JButton("Display Task");
   
      buttonPanel.add(addButton);
      buttonPanel.add(updateButton);
      buttonPanel.add(deleteButton);
      buttonPanel.add(viewAllButton);
      buttonPanel.add(displayTaskButton);
   
        // Task Display Area in the center
      taskDisplayArea = new JTextArea();
      taskDisplayArea.setEditable(false);
      JScrollPane scrollPane = new JScrollPane(taskDisplayArea);
   
      frame.add(inputPanel, BorderLayout.NORTH);
      frame.add(scrollPane, BorderLayout.CENTER);
      frame.add(buttonPanel, BorderLayout.SOUTH);
   
      addButton.addActionListener((ActionEvent e) -> addTask());
      updateButton.addActionListener((ActionEvent e) -> updateTask());
      deleteButton.addActionListener((ActionEvent e) -> deleteTask());
      viewAllButton.addActionListener((ActionEvent e) -> viewAllTasks());
      displayTaskButton.addActionListener((ActionEvent e) -> displayTask());
   
      
   
      frame.setVisible(true);
      viewAllTasks();
   }
      
   private void addTask() {
      Task task = new Task(
             0, // ID will be auto-generated by the database
             titleField.getText(),
             descriptionField.getText(),
             priorityField.getText(),
             LocalDate.parse(deadlineField.getText()),
             false // Default completion status
         );
      dbHandler.addTask(task);
      clearFields();
      viewAllTasks();
   }

   private void updateTask() {
      int taskId = Integer.parseInt(taskIdField.getText());
      Task task = new Task(
             taskId,
             titleField.getText(),
             descriptionField.getText(),
             priorityField.getText(),
             LocalDate.parse(deadlineField.getText()),
             false // Default completion status
         );
      dbHandler.updateTask(task);
      clearFields();
      viewAllTasks();
   }

   private void deleteTask() {
      int taskId = Integer.parseInt(taskIdField.getText());
      dbHandler.deleteTask(taskId);
      clearFields();
      viewAllTasks();
   }

   private void viewAllTasks() {
      List<Task> tasks = dbHandler.getAllTasks();
      StringBuilder tasksText = new StringBuilder();
      for (Task task : tasks) {
         tasksText.append(task).append("\n");
      }
      taskDisplayArea.setText(tasksText.toString());
   }

   private void clearFields() {
      taskIdField.setText("");
      titleField.setText("");
      descriptionField.setText("");
      priorityField.setText("");
      deadlineField.setText("");
   }
   
   private void displayTask() {
      int taskId = Integer.parseInt(taskIdField.getText());
      Task task = dbHandler.getTask(taskId);
      if (task != null) {
         titleField.setText(task.getTitle());
         descriptionField.setText(task.getDescription());
         priorityField.setText(task.getPriority());
         deadlineField.setText(task.getDeadline().toString());
            // Note: Task ID is not updated as it remains the same
      } else {
         JOptionPane.showMessageDialog(frame, "Task not found!");
      }
   }

   public static void main(String[] args) {
      new TaskManager();
   }
}
